
.returntype:before {
	content: " → ";
}

.membername:after {
	content: ": ";
}

.type[data-optional]::before {
	content: '?';
}

.typeparams {
	&::before {
		content: '<';
	}

	&::after {
		content: '>';
	}

	& > *::after {
		content: ', ';
	}

	& > *:last-child::after {
		content: '';
	}
}

.paramlist {
	&::before {
		content: '(';
	}

	&::after {
		content: ')';
	}
}

.rest-param::before {
	content: '...';
}


/* Customizations */

/* Hide all definitions not tagged `public`. */
dt:not([data-public]) {
	display: none;

	& + dd {
		display: none;
	}
}

/* Only print parentheses around non-unary functions. */
.paramlist {
	&::before {
		content: '(';
	}

	&::after {
		content: ')';
	}

	&[data-arity="1"] {
		&::before {
			content: '';
		}

		&::after {
			content: '';
		}
	}
}

/* Display `map<key, value>` types as `{ [key]: value }`. */
.type[data-typename="map"] {
	& > .parameterized-type {
		display: none;
	}

	& > .typeparams {
		&::before {
			content: '{ ';
		}

		&::after {
			content: ' }';
		}

		& > * {
			&::after {
				content: ' → ';
			}

			&:first-child::before {
				content: '[';
			}

			&:first-child::after {
				content: ']: ';
			}

			&:last-child::after {
				content: '';
			}
		}
	}

}


/* Display `union<a, b, ...>` as `a | b | ...`. */
.type[data-typename="union"] {
	& > .parameterized-type {
		display: none;
	}

	& > .typeparams {
		&::before {
			content: '';
		}

		&::after {
			content: '';
		}

		& > * {
			&::after {
				content: ' | ';
			}

			&:last-child::after {
				content: '';
			}
		}
	}
}

/* Render definitions tagged with `typealias` as `Name ::= Type`. */
dt[data-typealias] .membername:after {
	content: " ::= ";
}

